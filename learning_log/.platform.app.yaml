name: "ll_project"
type: "python:3.12"

relationships: 
  database: "db:postgresql" #Postgres 数据库
  
 # 应用程序被暴露到网上时使用的配置
web: 
  upstream: 
    socket_family: unix
  #commands:start告诉 Platform.sh，应使用哪个进程处理到来的请求。这里指定的是 gunicorn
  #这个命令的作用与我们在本地使用的命令 python manage.py runserver 相同。
  commands:  
    start: "gunicorn -w 4 -b unix:$SOCKET ll_project.wsgi:application"
    
  #locations 部分告诉 Platform.sh，将到来的请求发送到什么地方
  locations: 
    "/": 
      passthru: true
    "/static": 
      root: "static"
      expires: 1h
      allow: true

 # 应用程序的永久性磁盘的大小（单位为 MB）     
disk: 512

# 设置用于读写日志的本地挂载
mounts: 
  "logs": 
    source: local
    source_path: logs
    
# 在应用程序生命周期的不同时间点执行的钩子（hook）
hooks: 
  #安装了为线上环境中的项目提供服务的所有包
  build: |
    pip install --upgrade pip
    pip install -r requirements.txt
    pip install -r requirements_remote.txt
    
    mkdir logs
    #collectstatic，它将项目所需的所有静态文件都收集到同一个地方
    python manage.py collectstatic
    rm -rf logs
  #deploy 部分指定每次部署项目时都应执行迁移。
  deploy: |
    python manage.py migrate